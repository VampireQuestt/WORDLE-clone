{"version":3,"sources":["script.js"],"names":["lettersPattern","currentGuessCount","currentGuess","document","querySelector","words","solutionWord","chooseWord","randomItem","Math","floor","random","length","addEventListener","e","keypress","key","test","dataset","letters","updateLetters","deleteFromLetters","submitGuess","_loop","i","setTimeout","revealTile","checkLetters","checkIfGuessComplete","checkWin","console","log","jumpTiles","showSolution","alert","_loop2","classList","add","letter","newLetters","currentTile","updateTiles","tileNum","innerText","oldLetters","slice","deleteFromTiles","remove","position","guessedLetter","charAt","checkLetterExists","includes","state","flipTile","tile"],"mappings":"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","file":"script.js","sourcesContent":["const lettersPattern = /[A-Za-z]/;\r\nlet currentGuessCount = 1;\r\nlet currentGuess = document.querySelector('#guess' + currentGuessCount);\r\nconst words = ['apple','mango','money','honey','young','total','clone','robot','rough','tough','fight','eight','seven','polar','solar'];\r\nlet solutionWord = '';\r\n\r\nconst chooseWord = () => {\r\n\t// select a random item from word Array\r\n\tlet randomItem = Math.floor(Math.random() * words.length);\r\n\tsolutionWord = words[randomItem];\r\n}\r\n\r\nchooseWord();\r\n// console.log('solutionWord ' + solutionWord);\r\n\r\n// detect keypress (letter , backspace , enter , other)\r\ndocument.addEventListener('keydown' , (e) => {\r\n\t// console.log('keypress: ' + e.key);\r\n\r\n\t// if letter\r\n\tlet keypress = e.key;\r\n\tif(currentGuessCount < 7) {\r\n\t\tif(keypress.length === 1 && lettersPattern.test(keypress) && currentGuess.dataset.letters.length < 5){\r\n\t\t\tupdateLetters(keypress);\r\n\t\t}\r\n\t\telse if(e.key == 'Backspace' && currentGuess.dataset.letters.length !== 0){\r\n\t\t\tdeleteFromLetters();\r\n\t\t}\r\n\t\telse if(e.key == 'Enter' && currentGuess.dataset.letters.length === 5){\r\n\t\t\tsubmitGuess();\r\n\t\t}\r\n\t}\r\n});\r\n\r\nconst submitGuess = () => {\r\n\t// console.log(\"Guess Submitted!\");\r\n\tfor(let i = 0; i < 5; i++){\r\n\t\tsetTimeout(() => {\r\n\t\t\trevealTile(i , checkLetters(i));\r\n\t\t} , i*200);\r\n\t}\r\n};\r\n\r\nconst checkIfGuessComplete = (i) => {\r\n\tif(i == 4) {\r\n\t\tcheckWin();\r\n\t}\r\n};\r\n\r\nconst checkWin = () => {\r\n\tif(solutionWord == currentGuess.dataset.letters){\r\n\t\t// win\r\n\t\tconsole.log(\"Game is Won!\");\r\n\t\tsetTimeout(() => {\r\n\t\t\tjumpTiles();\r\n\t\t} , 500);\r\n\t}\r\n\telse{\r\n\t\t// not win\r\n\t\tcurrentGuessCount += 1;\r\n\t\tcurrentGuess = document.querySelector('#guess' + currentGuessCount);\r\n\t\tif(currentGuessCount == 7) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tshowSolution();\r\n\t\t\t} , 500);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst showSolution = () => {\r\n\talert('Better luck next Time, The Solution was ' + solutionWord);\r\n};\r\n\r\nconst jumpTiles = () => {\r\n\tfor(let i = 1; i <= 5; i++) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet currentTile = document.querySelector('#guess' + currentGuessCount + 'Tile' + i);\r\n\t\t\tcurrentTile.classList.add('jump');\r\n\t\t} , i*200);\r\n\t}\r\n};\r\n\r\n// Update \"letters\"\r\nconst updateLetters = (letter) => {\r\n\tlet oldLetters = currentGuess.dataset.letters;\r\n\tlet newLetters = oldLetters + letter;\r\n\tlet currentTile = newLetters.length;\r\n\tcurrentGuess.dataset.letters = newLetters;\r\n\tupdateTiles(currentTile , letter);\r\n};\r\n\r\n// Update tile markup\r\nconst updateTiles = (tileNum , letter) => {\r\n\tlet currentTile = document.querySelector('#guess' + currentGuessCount + 'Tile' + tileNum);\r\n\tcurrentTile.innerText = letter;\r\n\tcurrentTile.classList.add('has-letter');\r\n};\r\n\r\n// Backspace -- Delete last letter\r\nconst deleteFromLetters = () => {\r\n\t// remove last letter from data-letters\r\n\tlet oldLetters = currentGuess.dataset.letters;\r\n\tlet newLetters = oldLetters.slice(0, -1);\r\n\tcurrentGuess.dataset.letters = newLetters;\r\n\tdeleteFromTiles(oldLetters.length);\r\n};\r\n\r\n// Backspace -- Delete last tile markup\r\nconst deleteFromTiles = (tileNum) => {\r\n\t// remove markup from last tile\r\n\tlet currentTile = document.querySelector('#guess' + currentGuessCount + 'Tile' + tileNum);\r\n\tcurrentTile.innerText = '';\r\n\tcurrentTile.classList.remove('has-letter');\r\n};\r\n\r\nconst checkLetters = (position) => {\r\n\tlet guessedLetter = currentGuess.dataset.letters.charAt(position);\r\n\tlet solutionLetter = solutionWord.charAt(position);\r\n\t\r\n\tif(guessedLetter == solutionLetter){\r\n\t\treturn 'correct';\r\n\t}\r\n\telse{\r\n\t\treturn checkLetterExists(guessedLetter) ? 'present' : 'absent';\r\n\t}\r\n};\r\n\r\nconst checkLetterExists = (letter) => {\r\n\treturn solutionWord.includes(letter);\r\n};\r\n\r\n\r\nconst revealTile = (i , state) => {\r\n\tlet tileNum = i+1;\r\n\tflipTile(tileNum , state);\r\n\tcheckIfGuessComplete(i);\r\n};\r\n\r\nconst flipTile = (tileNum , state) => {\r\n\tlet tile = document.querySelector('#guess' + currentGuessCount + 'Tile' + tileNum);\r\n\ttile.classList.add('flip-in');\r\n\tsetTimeout(() => {\r\n\t\ttile.classList.add(state);\r\n\t} , 250);\r\n\tsetTimeout(() => {\r\n\t\ttile.classList.remove('flip-in');\r\n\t\ttile.classList.add('flip-out');\r\n\t} , 250);\r\n\tsetTimeout(() => {\r\n\t\ttile.classList.remove('flip-out');\r\n\t} , 1500);\r\n}\r\n"]}